/* Copyright 2013, The Sporting Exchange Limited Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. */package com.betfair.platform.virtualheap.projection;import com.betfair.platform.virtualheap.HListBase;import com.betfair.platform.virtualheap.ListNode;import java.util.Iterator;import java.util.NoSuchElementException;abstract class AbstractListProjection<T> implements HListBase<T> {    protected ListNode node;    public AbstractListProjection(ListNode node) {		this.node = node;	}    @Override    public void remove(int index) {        if (index >= 0 && index < size()) {            node.removeIndex(index);        } else {            throw new IndexOutOfBoundsException();        }    }    @Override    public boolean remove(T value) {        Iterator<T> it = iterator();        while (it.hasNext()) {            T next = it.next();            if (next.equals(value)) {                it.remove();                return true;            }        }        return false;    }    @Override    public void removeLast() {        int index = size() - 1;        if (index >= 0) {            remove(index);        } else {            throw new NoSuchElementException();        }    }    @Override    public void removeFirst() {        if (size() > 0) {            remove(0);        } else {            throw new NoSuchElementException();        }    }    @Override    public T peek() {        if (size() == 0) {            return null;        } else {            return get(0);        }    }    @Override    public boolean pop() {        if (size() > 0) {            removeFirst();            return true;        } else {            return false;        }    }    @Override    public int size() {        if (node == null) {            return 0;        }        return node.size();    }        @Override    public void clear() {    	node.clear();    }    @Override    public Iterator<T> iterator() {        return new Iterator<T>() {            int index = 0;            @Override            public boolean hasNext() {                return index < size();            }            @Override            public T next() {                return  AbstractListProjection.this.get(index++);            }            @Override            public void remove() {                AbstractListProjection.this.remove(--index);            }        };    }}